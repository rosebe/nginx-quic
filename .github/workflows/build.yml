# This is a basic workflow to help you get started with Actions

name: build nginx-patch beta 3

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - main
      - b*
  pull_request:
    branches:
      - main
      - b*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Runs a set of commands using the runners shell
      - name: depend
        run: |
          sudo apt-get install build-essential ca-certificates zlib1g-dev libpcre3 libpcre3-dev tar unzip libssl-dev wget curl git cmake ninja-build golang
          
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
        with:
         go-version: ^1.16
         stable: false
  
      - name: apt
        run: |
          sudo apt-get install curl gnupg2 ca-certificates tree
      
      - name: openssl-3.0.0
        run: |
          git clone https://github.com/openssl/openssl.git
          cd openssl
          git checkout .
          git pull
          git submodule update --init --recursive
          cd ..
          
      - name: brotli
        run: |
          git clone https://github.com/google/ngx_brotli.git
          cd ngx_brotli
          git checkout .
          git pull
          git submodule update --init --recursive
          cd ..
          
      - name: zlib-cf
        run: |
          git clone -b gcc.amd64  https://github.com/cloudflare/zlib.git zlib-cf
          cd zlib-cf
          make -f Makefile.in distclean
          git checkout .
          git pull
          git submodule update --init --recursive
          cd ..
          
      - name: pcre
        run: |
          curl -L -o pcre-8.45.tar.gz https://ftp.pcre.org/pub/pcre/pcre-8.45.tar.gz
          tar xzvf pcre-8.45.tar.gz
                              
          
      - name: build
        run: |
          git clone https://github.com/nginx/nginx.git
          cd nginx
          wget https://raw.githubusercontent.com/rosebe/patch/master/nginx.patch
          patch -p1 < nginx.patch
          
          ./auto/configure \
            --prefix=/etc/nginx \
            --sbin-path=/usr/sbin/nginx \
            --modules-path=/usr/lib64/nginx/modules \
            --conf-path=/etc/nginx/nginx.conf \
            --error-log-path=/var/log/nginx/error.log \
            --http-log-path=/var/log/nginx/access.log \
            --pid-path=/var/run/nginx.pid \
            --lock-path=/var/run/nginx.lock \
            --http-client-body-temp-path=/var/cache/nginx/client_temp \
            --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
            --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
            --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
            --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
            --user=nginx \
            --group=nginx \
            --with-compat \
            --with-file-aio \
            --with-threads \
            --with-http_addition_module \
            --with-http_auth_request_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_mp4_module \
            --with-http_random_index_module \
            --with-http_realip_module \
            --with-http_secure_link_module \
            --with-http_slice_module \
            --with-http_ssl_module \
            --with-http_stub_status_module \
            --with-http_sub_module \
            --with-http_v2_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-stream \
            --with-stream_realip_module \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --add-module=../ngx_brotli \
            --with-openssl=../openssl \
            --with-openssl-opt='enable-tls1_3 zlib -march=native -Wl,-flto' \
            --with-pcre=../pcre-8.45 --with-pcre-jit \
            --with-zlib=../zlib-cf \
            --with-http_v2_hpack_enc \
            --with-cc-opt='-O2 -fno-strict-aliasing -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -fPIC' \
            --with-ld-opt='-Wl,-z,relro -Wl,-z,now -fPIE'
          make -j$(nproc --all)
          echo ""
          echo "GITHUB_WORKFLOW is:" $GITHUB_WORKFLOW
          echo ""
          tree -d
          
      - uses: actions/upload-artifact@v2
        with:
          name: nginx-patch
          path: /home/runner/work/nginx-quic/nginx-quic/nginx/objs/nginx
          
      # Setting an environment variable
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions
      - name: Set variables
        id: step_one
        shell: bash
        run: |
          echo "ASSET_NAME=nginx-patch v$(cat /home/runner/work/nginx-quic/nginx-quic/nginx/.hgtags | tail -n 1 | awk '{print $2}' | awk -F- '{print $2}') build on $(date +%Y_%m_%d-%H:%M:%S)" >> $GITHUB_ENV
          echo "TAG_NAME=v$(cat /home/runner/work/nginx-quic/nginx-quic/nginx/.hgtags | tail -n 1 | awk '{print $2}' | awk -F- '{print $2}') patch" >> $GITHUB_ENV
          echo "RELEASE_NAME=nginx-patch v$(cat /home/runner/work/nginx-quic/nginx-quic/nginx/.hgtags | tail -n 1 | awk '{print $2}' | awk -F- '{print $2}')" >> $GITHUB_ENV
          
          echo "TAG_NAME: "
          echo "${{ env.TAG_NAME }}"
          echo ""
          echo "RELEASE_NAME: "
          echo "${{ env.RELEASE_NAME }}"
          echo ""
          echo "GITHUB_WORKFLOW is:" $GITHUB_WORKFLOW
          echo ""
          echo "GITHUB_ENV 1: "$GITHUB_ENV
          echo "GITHUB_ENV 2: ${GITHUB_ENV} "       
                  
      - name: Use variables
        id: step_two
        shell: bash
        run: |
          echo "TAG_NAME: "
          echo "${{ env.TAG_NAME }}"
          echo ""
          echo "RELEASE_NAME: "
          echo "${{ env.RELEASE_NAME }}"
          echo ""
          echo "GITHUB_WORKFLOW is:" $GITHUB_WORKFLOW
          echo ""
          echo "GITHUB_ENV 1: "$GITHUB_ENV
          echo "GITHUB_ENV 2: ${GITHUB_ENV} "
          
          echo "$(tree -d)"
          
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}          
          tag: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          file: /home/runner/work/nginx-quic/nginx-quic/nginx/objs/nginx
          body: "Play Happy "
          overwrite: true
          file_glob: false         
